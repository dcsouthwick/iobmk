input {
    stomp {
        destination => "/queue/bmkqueue"
        host => "localactivemq"
        password => "consumer_password"
        port => "61613"
        user => "consumer_login"
        }
}

filter {
  json {
        source => "message"
        target => "message"
  }

  clone {
    # two clones, one to store only hepscore values (copy_only_hepscore)
    # the other (copy_only_summary) to store all benchmarks, but from hepscore remove wl details
    clones => ['copy_only_hepscore', 'copy_only_summary']
  }

  mutate { 
    # copying the "type" field added by the clone plugin 
    # after having copied it to the metadata
    add_field => { "[@metadata][type]" => "%{[type]}" } 
    remove_field => ['type', 'host', 'sequence'] 
  }

  if ![message][json_version]  {
    # creating field _version if it does not exists, with default v01
    mutate { add_field => { "[message][json_version]" => "v01"} }
  }

  if [@metadata][type] == 'copy_only_hepscore' {
      # remove all other benchmarks from profiles
    mutate {
    	   remove_field => ["[message][profiles][DB12]", 
                          "[message][profiles][hs06_32]", 
                          "[message][profiles][hs06_64]", 
                          "[message][profiles][hyperbenchmark]", 
                          "[message][profiles][kv]", 
                          "[message][profiles][spec2017]", 
                          "[message][profiles][whetstone]"]
	  }
  } else if [@metadata][type] == 'copy_only_summary' {
    # remove hepscore details 
    mutate {
    	   remove_field => ["[message][profiles][hepscore][benchmarks]"]
	  }
  }
}

output {
  if [@metadata][type] == 'copy_only_hepscore' and  [message][profiles][hepscore] {
    # Store data only if the hepscore data are available, to avoid only insertion of host data
    file {
          path => "/tmp/logstash_long_json_only_hepscore.test"
        }

    elasticsearch {
        hosts => ['http://localelasticsearch:9200']
        user => "myelastic"
        password => "mypass"
        #ssl => "true"
	      #cacert => "/etc/certs/CERN.pem"
	      index => "bmkwg-prod-hepscore-%{[message][json_version]}"
        document_id => "%{[message][_id]}"
	      manage_template => "false"
	      ilm_enabled => "false"
     }



  } else if [@metadata][type] == 'copy_only_summary'{
      # Store summary data

    file {
          path => "/tmp/logstash_long_json_summary.test"
        }

    elasticsearch {
        hosts => ['http://localelasticsearch:9200']
        user => "myelastic"
        password => "mypass"
        #ssl => "true"
	      #cacert => "/etc/certs/CERN.pem"
	      index => "bmkwg-prod-summary-%{[message][json_version]}"
        document_id => "%{[message][_id]}"
	      manage_template => "false"
	      ilm_enabled => "false"
     }


  }

}
