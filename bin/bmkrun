#!/usr/bin/env python3

###############################################################################
# Copyright 2019-2020 CERN. See the COPYRIGHT file at the top-level directory
# of this distribution. For licensing information, see the COPYING file at
# the top-level directory of this distribution.
################################################################################

import argparse
import datetime
import logging
import sys
import socket
import os
import yaml
import textwrap

try:
    import importlib.resources as pkg_resources
except ImportError:
    # Try backported to PY<37 `importlib_resources`.
    import importlib_resources as pkg_resources

from hepbenchmarksuite.hepbenchmarksuite import HepBenchmarkSuite
from hepbenchmarksuite import utils
from hepbenchmarksuite import config
from hepbenchmarksuite.plugins import send_queue


def main():
    parser = argparse.ArgumentParser(
        prog='bmkrun',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''
        -----------------------------------------------
        High Energy Physics Benchmark Suite
        -----------------------------------------------
        This utility orchestrates several benchmarks

        Author: Benchmarking Working Group
        Contact: benchmark-suite-wg-devel@cern.ch
        '''), epilog=textwrap.dedent('''
        -----------------------------------------------
        ''')
    )

    # may be a better way to do this...
    try:
        with pkg_resources.path(config, 'benchmarks.yml') as defaultcfg:
            default_config = defaultcfg
    except Exception:
        print("Unable to load default config yaml")
        pass

    # Optional arguments
    parser.add_argument("-b", "--benchmarks", nargs='+', help="List of benchmarks", default=None)
    parser.add_argument("-c", "--config",     nargs='?', type=str, help="Configuration file to use (yaml format)", default=default_config)
    parser.add_argument("-d", "--rundir",     nargs='?', help="Directory where benchmarks will be run", default=None)
    parser.add_argument("-e", "--export",     action='store_true', help="Export all json and log files from rundir and compresses them.", default=None)
    parser.add_argument("-f", "--file",       nargs='?', help="File to store the results", default=None)
    parser.add_argument("-m", "--mode",       choices=['singularity', 'docker'], nargs='?', help="Run benchmarks in singularity or docker containers", default=None)
    parser.add_argument("-n", "--mp_num",     nargs='?', type=int, help="Number of cpus to run the benchmarks", default=None)
    parser.add_argument("-t", "--tags",       nargs='?', help="Custom user tags", default=None)
    parser.add_argument("-u", "--uid",        nargs='?', help="UID", default=None)
    parser.add_argument("-p", "--publish",    action='store_true', help="enable reporting via AMQ credentials in YAML file", default=None)
    parser.add_argument("-v", "--verbose",    action='store_true', help="Enables verbose mode. Display debug messages.", default=None)

    try:
        args = parser.parse_args()
    except Exception:
        sys.exit(0)

    # Select config file
    if args.config is not None:
        with open(args.config, 'r') as yam:
            conf_data = yaml.full_load(yam)
        active_config = conf_data
    else:
        parser.print_help()
        sys.exit("No config file specified.")

    # Check for cli overrides
    # Convert arguments to dict
    temp_config = vars(args)
    del temp_config['config']

    # Get non-None cli arguments to override config file
    non_empty = {k: v for k, v in temp_config.items() if v is not None}

    # Populate active config with cli override
    for i in non_empty.keys():
        if i == 'tags':
            # Update tags with json format
            active_config['global']['tags'] = utils.convert_tags_to_json(args.tags)
        else:
            active_config['global'][i] = non_empty[i]

    # Check if user provided a benchmark
    if active_config['global']['benchmarks'] is None:
        parser.print_help()
        sys.exit("No benchmarks were selected.")

    # Check if user provided valid benchmark
    AVAILABLE_BENCHMARKS = ["db12",
                            "hepscore",
                            "spec2017",
                            "hs06_32",
                            "hs06_64",
                            "test"]

    for bench in active_config['global']['benchmarks']:
        if bench not in AVAILABLE_BENCHMARKS:
            sys.exit('Benchmark "{}" is not a valid benchmark.\
                      Please select one of the following benchmarks:\n- {} \
                      '.format(bench, '\n- '.join(AVAILABLE_BENCHMARKS)))

    # use all CPUs found if invalid parameter provided
    if ('mp_num' not in active_config['global'].keys()
            or active_config['global']['mp_num'] is None
            or int(active_config['global']['mp_num']) > os.cpu_count()):
        active_config['global']['mp_num'] = os.cpu_count()

    # Check if cpu count in config is integer
    if not isinstance(active_config['global']['mp_num'], int):
        sys.exit("CPU number is not an integer.")

    # Create rundir if not present
    os.makedirs(active_config['global']['rundir'], exist_ok=True)

    # Configure logging
    # Log verbosity
    if args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    # Enable logging
    logger = logging.getLogger()
    logger.setLevel(log_level)

    # Log format
    log_formatter = logging.Formatter('%(asctime)s, %(name)s:%(funcName)s [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

    # Handler to write logs to stdout
    stream_handler = logging.StreamHandler(sys.stdout)
    stream_handler.setFormatter(log_formatter)
    stream_handler.setLevel(log_level)

    # Handler to write logs to file
    LOG_PATH = os.path.join(active_config['global']['rundir'], 'hep-benchmark-suite.log')
    file_handler = logging.FileHandler(LOG_PATH)
    file_handler.setFormatter(log_formatter)
    file_handler.setLevel(log_level)

    # Select loggers
    logger.addHandler(stream_handler)
    logger.addHandler(file_handler)

    # Save running config
    with open(os.path.join(active_config['global']['rundir'], 'run_config.yaml'), 'w') as conf_file:
        yaml.dump(active_config, conf_file)

    # Configure hep-benchmark-suite
    logger.debug("Active configuration in use: {}".format(active_config))
    suite = HepBenchmarkSuite(config=active_config)
    suite.start()

    # Export logs and json to a compressed tarball
    # format of export: dirname_hostname_datetime.tar.gz
    if args.export:
        utils.export(active_config['global']['rundir'], '{}_{}_{}.tar.gz'.format(os.path.split(active_config['global']['rundir'])[-1],
                                                                                 socket.gethostname(),
                                                                                 datetime.datetime.now().strftime("%Y-%m-%d_%H%M")))

    # Display results
    FULL_PATH = os.path.join(active_config['global']['rundir'], active_config['global']['file'])
    utils.print_results_from_file(FULL_PATH)

    # Publish to AMQ broker if provided
    if 'publish' in active_config['global']:
        try:
            send_queue.send_message(FULL_PATH, active_config['activemq'])
        except Exception as e:
            logger.error("Something went wrong attempting to report via AMQ.")
            logger.error("Results may not have been correctly transmitted.")
            logger.exception(e)
            pass

    print("\nFull results can be found in {}".format(FULL_PATH))
    print("Full run log can can be found in {}".format(LOG_PATH))


if __name__ == "__main__":
    main()
