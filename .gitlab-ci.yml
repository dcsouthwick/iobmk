# Gitlab CI build pipeline definition
stages:
  - test-parsing-and-injection
  - test-components
  - test-singularity
  - test-docker
  - deploy


code_quality:
  stage: test-components
  script:
    - mkdir -p public/badges public/lint
    - echo undefined > public/badges/$CI_JOB_NAME.score
    - yum install -y -q python3-pip
    - python3 -m pip install -U pip tox pylint_gitlab
    - tox -e pep8 | tee /tmp/pylint.txt
    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
    - pylint -j 0 --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find . \( -path ./.tox -o -path ./tests \) -prune -false -o -name "*.py") bin/bmkrun bin/bmk_show_metadata > codeclimate.json
  after_script:
    - anybadge --overwrite --label "code quality" --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
    - echo "Your score is $(cat public/badges/$CI_JOB_NAME.score)"
  artifacts:
    paths:
      - public
    reports:
      codequality: codeclimate.json
    when: always
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'

python_supported_versions:
  # determine minimum supported python version
  stage: test-components
  dependencies: []
  script:
    - yum install -y -q python3-pip
    - python3 -m pip install -U pip vermin
    - vermin -vv .
  rules:
    - changes:
      - "**/*.py"
      - "bin/*"

coverage:
  stage: test-components
  dependencies: []
  script:
    - yum install -y -q python3-pip
    - python3 -m pip install -U pip tox
    - tox
  rules:
    - if: '$CI_COMMIT_BRANCH == "qa" || $CI_COMMIT_BRANCH == "master"'
      when: never
    - when: always
  artifacts:
    reports:
      junit: report.xml
    when: always

Security:
  stage: test-components
  dependencies: []
  allow_failure: true
  script:
    - yum install -y -q python3-pip
    - python3 -m pip install -U pip tox
    - tox -e bandit
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^qa-.*$/ || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_TAG =~ /^v.*$/'
      when: never
    - when: always

YAML_lint:
  stage: test-components
  dependencies: []
  script:
    - yum install -y -q yamllint
    - yamllint -c tests/ci/yamllint_conf.yml hepbenchmarksuite/config/benchmarks.yml
  rules:
    - if: '$CI_COMMIT_BRANCH == "qa" || $CI_COMMIT_BRANCH == "master"'
      when: never
    - changes:
      - "**/*.yaml"
      - "**/*.yml"

.db12_benchmark:
  stage: test-components
  dependencies: []
  script:
    - yum install -y -q singularity python3-pip
    - python3 -m pip install --user --upgrade pip
    - python3 -m pip install --user .
    - export PATH=~/.local/bin:$PATH
    - bmkrun --config default --rundir . --benchmarks db12
  artifacts:
    paths:
      - ./run_*/result_profile.json
      - ./run_*/run_config.yaml
    expire_in: 1 week
    when: always
  rules:
    - if: '$CI_COMMIT_BRANCH == "qa" || $CI_COMMIT_BRANCH == "master"'
      when: never
    - when: always

############################################################
#####              TEST PARSING & INJECTION            #####
############################################################


.bats_test_docker_compose_qa:
  stage: test-parsing-and-injection
  image:
    name: gitlab-registry.cern.ch/cloud-infrastructure/data-analytics/compose:v0.1
    entrypoint: [""]
  tags:
    -  hep-benchmark-suite-docker-runner
  rules:
   - if: '$CI_COMMIT_BRANCH =~ /^qa.*$/'
  script:
    - . $CI_PROJECT_DIR/tests/docker_compose_amq_to_es/ci_run_script.sh
    - ci_run_script
  after_script:
    - . $CI_PROJECT_DIR/tests/docker_compose_amq_to_es/ci_run_script.sh
    - stop_docker_compose
  artifacts:
    paths:
        - $CI_PROJECT_DIR/tests/docker_compose_amq_to_es/*
    expire_in: 1 week
    when: always

############################################################
#####              TEST SINGULARITY                    #####
############################################################

.test_qa_singularity:
    # This job tests the hep-benchmark-suite
    # running a configurable set of benchmarks defined in $BMKLIST
  stage: test-singularity
  dependencies: []
  tags: 
    # Currently restricted to XL as we hard-code 20GB free requirement
    - docker-privileged-xl
    #- hep-benchmark-suite-docker-runner
  # use image that has singularity.cern repo
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  variables:
    BMK_VOLUME: /tmp/${CI_JOB_NAME}_${CI_JOB_ID}
    RESULTS_FILE: $CI_JOB_NAME.json
    SINGULARITY_CACHEDIR: $CI_PROJECT_DIR/singularity_cachedir
  script:
    - yum install -y -q git singularity python3-pip
    - python3 -m pip install -U pip wheel
    # Gitlab cannot modify $PATH in variables section
    #- export PATH=$PATH:$(pwd)/.local/bin
    - export PATH=$PATH:$HOME/.local/bin
    # non-root user
    - useradd -d $(pwd) -g users -M -N unprivUser
    - chown -R unprivUser:users ..
    # install the benchmark suite python package & run unprivileged
    #- su unprivUser -c "python3 -m pip install --user ."
    #- su unprivUser -c "bmkrun --mode=singularity --config=tests/ci/benchmarks.yml --rundir=$BMK_VOLUME --benchmarks=$BMKLIST"
    - python3 -m pip install --user .
    - bmkrun --mode=singularity --config=tests/ci/benchmarks.yml --rundir=$BMK_VOLUME --benchmarks=$BMKLIST
    # cleanup
    - mv $BMK_VOLUME/run_*/bmkrun_report.json $CI_PROJECT_DIR
    - rm -rf $BMK_VOLUME
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^qa.*$/'
  cache:
    key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - singularity_cachedir/**/*
  artifacts:
    paths:
      - $RESULTS_FILE
    exclude:
      - singularity_cachedir
    expire_in: 1 week
    when: always

.sing_hepscore:
  extends: .test_qa_singularity
  before_script:
    - export BMKLIST="hepscore"

.sing_hs06:
  extends: .test_qa_singularity
  before_script:
    - export BMKLIST="hs06"
    - export HS06URL=$HS06URL
    - sed -ri "s|url_tarball:.*|url_tarball:\ \"$HS06URL\"|" tests/ci/benchmarks.yml

.sing_spec2017:
  extends: .test_qa_singularity
  before_script:
    - export BMKLIST="spec2017"
    - export SPEC2017URL=$SPEC2017URL
    - sed -ri "s|url_tarball:.*|url_tarball:\ \"$SPEC2017URL\"|" tests/ci/benchmarks.yml

############################################################
#####              TEST DOCKER                         #####
############################################################

.test_qa_docker:
    # This job tests the hep-benchmark-suite
    # running a configurable set of benchmarks defined in $BMKLIST
  extends: .test_qa_singularity
  image: gitlab-registry.cern.ch/hep-benchmarks/hep-workloads-builder/dind:v1.0
  cache:
  stage: test-docker
  tags:
    - hep-benchmark-suite-docker-runner
  #services:
  #  - docker:19.03.1-dind
  variables:
    # Disable TLS following https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    # This will result in a warning that the docker-in-docker service may not have started successfully
    #DOCKER_TLS_CERTDIR: ""
    #DOCKER_HOST: tcp://docker:2375/
    BMK_VOLUME: /tmp/${CI_JOB_NAME}_${CI_JOB_ID}
    RESULTS_FILE: $CI_JOB_NAME.json
  script:
    - yum install -y -q git python3-pip
    - export PATH=$PATH:$HOME/.local/bin
    # non-root user
    #- useradd -d $(pwd) -g users -M -N unprivUser
    #- chown -R unprivUser:users ..
    #- usermod -aG docker unprivUser
    #- su - unprivUser
    #- set -e
    # install the benchmark suite python package
    - python3 -m pip install --user --upgrade pip
    - python3 -m pip install .
    # run $BMKLIST as docker
    - bmkrun --config=tests/ci/benchmarks.yml --mode=docker --rundir=$BMK_VOLUME --benchmarks=$BMKLIST
    - mv $BMK_VOLUME/run_*/bmkrun_report.json .
    - rm -rf $BMK_VOLUME
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^qa.*$/'
    - if: '$CI_COMMIT_BRANCH =~ /^v2.*$/'
  artifacts:
    paths:
      - ./*.json
    expire_in: 1 week
    when: always

.docker_hepscore:
  extends: .test_qa_docker
  before_script:
    - export BMKLIST="hepscore"

.docker_hs06:
  extends: .test_qa_docker
  before_script:
    - export BMKLIST="hs06"
    - export HS06URL=$HS06URL
    - sed -ri "s|url_tarball:.*|url_tarball:\ \"$HS06URL\"|" tests/ci/benchmarks.yml

.docker_spec2017:
  extends: .test_qa_docker
  before_script:
    - export BMKLIST="spec2017"
    - export SPEC2017URL=$SPEC2017URL
    - sed -ri "s|url_tarball:.*|url_tarball:\ \"$SPEC2017URL\"|" tests/ci/benchmarks.yml


############################################################
#####           BUILD & PUBLISH PACKAGE                #####
############################################################

.dist_hep-benchmark-suite:
  stage: deploy
  dependencies: []
  environment:
    # production keyword for gitlab value tracking
    name: production
    url: https://staging.example.com
  script:
    - yum install -y -q git python3-pip sshpass coreutils
    - python3 -m pip install --upgrade setuptools wheel pip
    - python3 -m pip wheel -r requirements.txt --wheel-dir=suite_wheels .
    - export PKG_NAME="hep-benchmark-suite-wheels-${CI_COMMIT_TAG}.tar"
    - tar -cvf ${PKG_NAME} suite_wheels/
    - export PKG_HASH=$(md5sum ${PKG_NAME} | cut -d ' ' -f 1)
    - SSHPASS=${CI_CPUBMK} sshpass -v -e scp -v -oStrictHostKeyChecking=no -r ${PKG_NAME} cpubmk@lxplus.cern.ch:${CI_EOS_RELEASES}
    - |
      curl -X POST "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases" \
      --header "PRIVATE-TOKEN: ${CI_API_TOKEN}" \
      --header "Content-Type: application/json" \
      --data "{\"tag_name\": \"${CI_COMMIT_TAG}\", \"name\": \"${CI_COMMIT_TAG}\", \"description\": \"${CI_COMMIT_TAG_MESSAGE:-No release notes.}\", \"assets\": { \"links\": [{ \"name\": \"HEP Benchmark Suite python wheels (md5sum: ${PKG_HASH})\", \"url\": \"${CI_WEB_RELEASES}/${PKG_NAME}\", \"link_type\":\"package\" }] }}" \
      --fail --output "/dev/null" --silent --show-error --write-out "HTTP response: ${http_code:-OK}\n\n"
    - curl -o retrieved_file ${CI_WEB_RELEASES}/${PKG_NAME}
    - cmp retrieved_file ${PKG_NAME}
  artifacts:
    paths:
      - suite_wheels
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v.*$/'
